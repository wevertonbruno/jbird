expression -> literal | unary_expression | binary_expression | grouping;

literal -> NUMBER | STRING | TRUE | FALSE | NIL;

binary_expression -> expression operator expression;

grouping -> L_PAREN expression R_PAREN;

=======

a ? b : c ? d : e
-> a ? b : (c ? d : e)



conditional_operator -> condition | condition ? expression : conditional_operator;

condition -> expression;

expression -> equality;

equality -> comparison ( ( EQUAL_EQUAL | NOT_EQUAL ) comparison ) *;

comparison -> term ( ( GREATER | GREATER_THEN | LESS | LESS_THEN ) term )*;

term -> factor ( ( PLUS | MINUS ) factor )*;

factor -> unary ( (MULTI | SLASH) unary ) *;

unary -> (EXCLAMATION | MINUS) unary | primary;

primary -> literal | grouping;

======

ternary_expression -> expression QUESTION_MARK expression COLON expression;
