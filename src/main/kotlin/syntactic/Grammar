expression -> literal | unary_expression | binary_expression | grouping;

literal -> NUMBER | STRING | TRUE | FALSE | NIL;

binary_expression -> expression operator expression;

grouping -> L_PAREN expression R_PAREN;

=======

program -> statement* EOF;

statement -> expr_stmt | print_stmt;

expr_stmt -> conditional_expression separator;

print_stmt -> PRINT expression separator;

separator -> SEMICOLON | BREAK_LINE;

conditional_expression -> expression | expression ? expression : conditional_expression;

expression -> equality;

equality -> comparison ( ( EQUAL_EQUAL | NOT_EQUAL ) comparison ) *;

comparison -> term ( ( GREATER | GREATER_THEN | LESS | LESS_THEN ) term )*;

term -> factor ( ( PLUS | MINUS ) factor )*;

factor -> unary ( (MULTI | SLASH) unary ) *;

unary -> (EXCLAMATION | MINUS) unary | primary;

primary -> literal | grouping;

======

ternary_expression -> expression QUESTION_MARK expression COLON expression;
